!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ASM	Makefile	/^ASM		= nasm$/;"	m
ASMKFLAGS	Makefile	/^ASMKFLAGS	= -I kernel\/include\/ -f elf$/;"	m
ASSERT	kernel/include/debug.h	5;"	d
BYTES_FOR_EACH_ELEMENT	kernel/include/scrn.h	6;"	d
CC	Makefile	/^CC		= gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS		= -I kernel\/include\/ -fno-stack-protector -fno-builtin -m32 -c $/;"	m
COLUMNS	kernel/include/scrn.h	5;"	d
C_OBJECTS	Makefile	/^C_OBJECTS = $(patsubst %.c, %.o, $(C_SOURCES))$/;"	m
C_SOURCES	Makefile	/^C_SOURCES = $(shell find . -name "*.c")$/;"	m
CleanScreen	kernel/driver/scrn.c	/^void CleanScreen()$/;"	f
DPL_KERNEL	kernel/include/gdt.h	19;"	d
DPL_USER	kernel/include/gdt.h	20;"	d
ELF32_ST_TYPE	kernel/include/elf.h	7;"	d
FL_AC	kernel/include/mmu.h	22;"	d
FL_AF	kernel/include/mmu.h	7;"	d
FL_CF	kernel/include/mmu.h	5;"	d
FL_DF	kernel/include/mmu.h	12;"	d
FL_ID	kernel/include/mmu.h	25;"	d
FL_IF	kernel/include/mmu.h	11;"	d
FL_IOPL_0	kernel/include/mmu.h	15;"	d
FL_IOPL_1	kernel/include/mmu.h	16;"	d
FL_IOPL_2	kernel/include/mmu.h	17;"	d
FL_IOPL_3	kernel/include/mmu.h	18;"	d
FL_IOPL_MASK	kernel/include/mmu.h	14;"	d
FL_NT	kernel/include/mmu.h	19;"	d
FL_OF	kernel/include/mmu.h	13;"	d
FL_PF	kernel/include/mmu.h	6;"	d
FL_RF	kernel/include/mmu.h	20;"	d
FL_SF	kernel/include/mmu.h	9;"	d
FL_TF	kernel/include/mmu.h	10;"	d
FL_VIF	kernel/include/mmu.h	23;"	d
FL_VIP	kernel/include/mmu.h	24;"	d
FL_VM	kernel/include/mmu.h	21;"	d
FL_ZF	kernel/include/mmu.h	8;"	d
GD_KDATA	kernel/include/gdt.h	13;"	d
GD_KTEXT	kernel/include/gdt.h	12;"	d
GD_TSS	kernel/include/gdt.h	16;"	d
GD_UDATA	kernel/include/gdt.h	15;"	d
GD_UTEXT	kernel/include/gdt.h	14;"	d
IMG	Makefile	/^IMG		= tools\/os.img$/;"	m
INDEX	kernel/driver/scrn.c	/^static int INDEX = 0;$/;"	v	file:
KERNEL	Makefile	/^KERNEL 		= tools\/kernel.bin$/;"	m
KERNEL_CS	kernel/include/gdt.h	23;"	d
KERNEL_DS	kernel/include/gdt.h	24;"	d
LD	Makefile	/^LD 		= ld$/;"	m
LDFLAGS	Makefile	/^LDFLAGS		= -m elf_i386 -T tools\/kernel.ld$/;"	m
LINES	kernel/include/scrn.h	4;"	d
MULTIBOOT_AOUT_KLUDGE	boot/start.s	/^    MULTIBOOT_AOUT_KLUDGE	equ 1<<16$/;"	d
MULTIBOOT_CHECKSUM	boot/start.s	/^    MULTIBOOT_CHECKSUM	equ -(MULTIBOOT_HEADER_MAGIC + MULTIBOOT_HEADER_FLAGS)$/;"	d
MULTIBOOT_HEADER_FLAGS	boot/start.s	/^    MULTIBOOT_HEADER_FLAGS	equ MULTIBOOT_PAGE_ALIGN | MULTIBOOT_MEMORY_INFO | MULTIBOOT_AOUT_KLUDGE$/;"	d
MULTIBOOT_HEADER_MAGIC	boot/start.s	/^    MULTIBOOT_HEADER_MAGIC	equ 0x1BADB002$/;"	d
MULTIBOOT_MEMORY_INFO	boot/start.s	/^    MULTIBOOT_MEMORY_INFO	equ 1<<1$/;"	d
MULTIBOOT_PAGE_ALIGN	boot/start.s	/^    MULTIBOOT_PAGE_ALIGN	equ 1<<0$/;"	d
MyPutc	kernel/driver/scrn.c	/^void MyPutc(char c)$/;"	f
MyPuts	kernel/driver/scrn.c	/^void MyPuts(char *str)$/;"	f
NULL	kernel/include/type.h	5;"	d
PANIC	kernel/include/debug.h	4;"	d
ROUNDDOWN	kernel/include/type.h	46;"	d
ROUNDUP	kernel/include/type.h	52;"	d
RollScreen	kernel/driver/scrn.c	/^void RollScreen()$/;"	f
SCREENSIZE	kernel/include/scrn.h	7;"	d
SECTION	boot/start.s	/^SECTION .bss$/;"	l
SEG	kernel/include/mmu.h	113;"	d
SEG16	kernel/include/mmu.h	121;"	d
SEG_KDATA	kernel/include/gdt.h	7;"	d
SEG_KTEXT	kernel/include/gdt.h	6;"	d
SEG_NULL	kernel/include/gdt.h	5;"	d
SEG_TSS	kernel/include/gdt.h	10;"	d
SEG_UDATA	kernel/include/gdt.h	9;"	d
SEG_UTEXT	kernel/include/gdt.h	8;"	d
SETCALLGATE	kernel/include/mmu.h	84;"	d
SETGATE	kernel/include/mmu.h	71;"	d
STACK_TOP	boot/start.s	/^STACK_TOP equ $-stack-1$/;"	d
STA_A	kernel/include/mmu.h	33;"	d
STA_C	kernel/include/mmu.h	30;"	d
STA_E	kernel/include/mmu.h	29;"	d
STA_R	kernel/include/mmu.h	32;"	d
STA_W	kernel/include/mmu.h	31;"	d
STA_X	kernel/include/mmu.h	28;"	d
STS_CG16	kernel/include/mmu.h	39;"	d
STS_CG32	kernel/include/mmu.h	45;"	d
STS_IG16	kernel/include/mmu.h	41;"	d
STS_IG32	kernel/include/mmu.h	46;"	d
STS_LDT	kernel/include/mmu.h	37;"	d
STS_T16A	kernel/include/mmu.h	36;"	d
STS_T16B	kernel/include/mmu.h	38;"	d
STS_T32A	kernel/include/mmu.h	43;"	d
STS_T32B	kernel/include/mmu.h	44;"	d
STS_TG	kernel/include/mmu.h	40;"	d
STS_TG16	kernel/include/mmu.h	42;"	d
STS_TG32	kernel/include/mmu.h	47;"	d
S_OBJECTS	Makefile	/^S_OBJECTS = $(patsubst %.s, %.o, $(S_SOURCES))$/;"	m
S_SOURCES	Makefile	/^S_SOURCES = $(shell find . -name "*.s")$/;"	m
TXT_COLOR	kernel/include/scrn.h	25;"	d
T_SWITCH_TOK	kernel/include/isrs.h	43;"	d
T_SWITCH_TOU	kernel/include/isrs.h	42;"	d
USER_CS	kernel/include/gdt.h	25;"	d
USER_DS	kernel/include/gdt.h	26;"	d
VIDPTR	kernel/driver/scrn.c	/^static char *VIDPTR = (char*)0xb8000;$/;"	v	file:
_COMMON_H_	kernel/include/common.h	2;"	d
_DEBUG_H_	kernel/include/debug.h	2;"	d
_ELF_H_	kernel/include/elf.h	2;"	d
_GDT_H_	kernel/include/gdt.h	2;"	d
_IDT_H_	kernel/include/idt.h	2;"	d
_IRQ_H_	kernel/include/irq.h	2;"	d
_ISRS_H_	kernel/include/isrs.h	2;"	d
_KB_H_	kernel/include/kb.h	2;"	d
_MMU_H_	kernel/include/mmu.h	2;"	d
_MULTIBOOT_H_	kernel/include/multiboot.h	2;"	d
_PMM_H_	kernel/include/pmm.h	2;"	d
_SCRN_H_	kernel/include/scrn.h	2;"	d
_STRING_H_	kernel/include/string.h	2;"	d
_TIMER_H_	kernel/include/timer.h	2;"	d
_TYPE_H_	kernel/include/type.h	2;"	d
__always_inline	kernel/include/type.h	70;"	d
__noinline	kernel/include/type.h	71;"	d
__noreturn	kernel/include/type.h	72;"	d
access	kernel/include/gdt.h	/^    unsigned char access;$/;"	m	struct:gdt_entry
addr	kernel/include/elf.h	/^  uint32_t addr;$/;"	m	struct:elf_section_header_t
addr	kernel/include/multiboot.h	/^	uint32_t addr;$/;"	m	struct:multiboot_t
addralign	kernel/include/elf.h	/^  uint32_t addralign;$/;"	m	struct:elf_section_header_t
always0	kernel/include/idt.h	/^    unsigned char always0;$/;"	m	struct:idt_entry
apm_table	kernel/include/multiboot.h	/^	uint32_t apm_table; 	    	\/\/ APM 表$/;"	m	struct:multiboot_t
attrib	kernel/driver/scrn.c	/^static int attrib = TXT_COLOR;$/;"	v	file:
base	kernel/include/gdt.h	/^    unsigned int base;$/;"	m	struct:gdt_ptr
base	kernel/include/idt.h	/^    unsigned int base;$/;"	m	struct:idt_ptr
base_addr_high	kernel/include/multiboot.h	/^	uint32_t base_addr_high;$/;"	m	struct:mmap_entry_t
base_addr_low	kernel/include/multiboot.h	/^	uint32_t base_addr_low;$/;"	m	struct:mmap_entry_t
base_hi	kernel/include/idt.h	/^    unsigned short base_hi;$/;"	m	struct:idt_entry
base_high	kernel/include/gdt.h	/^    unsigned char base_high;$/;"	m	struct:gdt_entry
base_lo	kernel/include/idt.h	/^    unsigned short base_lo;$/;"	m	struct:idt_entry
base_low	kernel/include/gdt.h	/^    unsigned short base_low;$/;"	m	struct:gdt_entry
base_middle	kernel/include/gdt.h	/^    unsigned char base_middle;$/;"	m	struct:gdt_entry
bits	kernel/driver/scrn_s.s	/^bits 32$/;"	l
black	kernel/include/scrn.h	9;"	d
blue	kernel/include/scrn.h	10;"	d
bool	kernel/include/type.h	/^typedef int bool;$/;"	t
boot_device	kernel/include/multiboot.h	/^	uint32_t boot_device;		\/\/ 指出引导程序从哪个BIOS磁盘设备载入的OS映像$/;"	m	struct:multiboot_t
boot_loader_name	kernel/include/multiboot.h	/^	uint32_t boot_loader_name; 	\/\/ boot loader 的名字$/;"	m	struct:multiboot_t
brown	kernel/include/scrn.h	15;"	d
cls	kernel/driver/scrn.c	/^void cls()$/;"	f
cmain	kernel/init/cmain.c	/^void cmain()$/;"	f
cmdline	kernel/include/multiboot.h	/^	uint32_t cmdline;		\/\/ 内核命令行$/;"	m	struct:multiboot_t
config_table	kernel/include/multiboot.h	/^	uint32_t config_table; 		\/\/ ROM 配置表$/;"	m	struct:multiboot_t
cs	kernel/include/idt.h	/^    unsigned int eip, cs, eflags, useresp, ss;    $/;"	m	struct:regs
csr_x	kernel/driver/scrn.c	/^static int csr_x = 0, csr_y = 0;$/;"	v	file:
csr_y	kernel/driver/scrn.c	/^static int csr_x = 0, csr_y = 0;$/;"	v	file:
cyan	kernel/include/scrn.h	12;"	d
dark_grey	kernel/include/scrn.h	17;"	d
drives_addr	kernel/include/multiboot.h	/^	uint32_t drives_addr; 		\/\/ 指出第一个驱动器这个结构的大小$/;"	m	struct:multiboot_t
drives_length	kernel/include/multiboot.h	/^	uint32_t drives_length; 	\/\/ 指出第一个驱动器结构的物理地址	$/;"	m	struct:multiboot_t
ds	kernel/include/idt.h	/^    unsigned int gs, fs, es, ds;$/;"	m	struct:regs
eax	kernel/include/idt.h	/^    unsigned int edi, esi, ebp, esp, ebx, edx, ecx, eax;$/;"	m	struct:regs
ebp	kernel/include/idt.h	/^    unsigned int edi, esi, ebp, esp, ebx, edx, ecx, eax;$/;"	m	struct:regs
ebx	kernel/include/idt.h	/^    unsigned int edi, esi, ebp, esp, ebx, edx, ecx, eax;$/;"	m	struct:regs
ecx	kernel/include/idt.h	/^    unsigned int edi, esi, ebp, esp, ebx, edx, ecx, eax;$/;"	m	struct:regs
edi	kernel/include/idt.h	/^    unsigned int edi, esi, ebp, esp, ebx, edx, ecx, eax;$/;"	m	struct:regs
edx	kernel/include/idt.h	/^    unsigned int edi, esi, ebp, esp, ebx, edx, ecx, eax;$/;"	m	struct:regs
eflags	kernel/include/idt.h	/^    unsigned int eip, cs, eflags, useresp, ss;    $/;"	m	struct:regs
eip	kernel/include/idt.h	/^    unsigned int eip, cs, eflags, useresp, ss;    $/;"	m	struct:regs
elf_section_header_t	kernel/include/elf.h	/^struct elf_section_header_t {$/;"	s
elf_section_header_t	kernel/include/elf.h	/^} __attribute__((packed)) elf_section_header_t;$/;"	t	typeref:struct:elf_section_header_t
elf_symbol_t	kernel/include/elf.h	/^struct elf_symbol_t {$/;"	s
elf_symbol_t	kernel/include/elf.h	/^} __attribute__((packed)) elf_symbol_t;$/;"	t	typeref:struct:elf_symbol_t
elf_t	kernel/include/elf.h	/^struct elf_t {$/;"	s
elf_t	kernel/include/elf.h	/^} elf_t;$/;"	t	typeref:struct:elf_t
entsize	kernel/include/elf.h	/^  uint32_t entsize;$/;"	m	struct:elf_section_header_t
err_code	kernel/include/idt.h	/^    unsigned int int_no, err_code;$/;"	m	struct:regs
es	kernel/include/idt.h	/^    unsigned int gs, fs, es, ds;$/;"	m	struct:regs
esi	kernel/include/idt.h	/^    unsigned int edi, esi, ebp, esp, ebx, edx, ecx, eax;$/;"	m	struct:regs
esp	kernel/include/idt.h	/^    unsigned int edi, esi, ebp, esp, ebx, edx, ecx, eax;$/;"	m	struct:regs
exception_messages	kernel/include/isrs.h	/^static unsigned char *exception_messages[] =$/;"	v
extern	kernel/mm/gdt_s.s	/^extern gp$/;"	l
extern	kernel/trap/idt_s.s	/^extern idtp$/;"	l
extern	kernel/trap/irq_s.s	/^extern irq_handler$/;"	l
extern	kernel/trap/isrs_s.s	/^extern isr_handler$/;"	l
flags	kernel/include/elf.h	/^  uint32_t flags;$/;"	m	struct:elf_section_header_t
flags	kernel/include/idt.h	/^    unsigned char flags;$/;"	m	struct:idt_entry
flags	kernel/include/multiboot.h	/^	uint32_t flags;			\/\/ Multiboot 的版本信息$/;"	m	struct:multiboot_t
flush2	kernel/mm/gdt_s.s	/^flush2:$/;"	l
fs	kernel/include/idt.h	/^    unsigned int gs, fs, es, ds;$/;"	m	struct:regs
gatedesc	kernel/include/mmu.h	/^struct gatedesc {$/;"	s
gd_args	kernel/include/mmu.h	/^    unsigned gd_args : 5;            \/\/ # args, 0 for interrupt\/trap gates$/;"	m	struct:gatedesc
gd_dpl	kernel/include/mmu.h	/^    unsigned gd_dpl : 2;            \/\/ descriptor(meaning new) privilege level$/;"	m	struct:gatedesc
gd_off_15_0	kernel/include/mmu.h	/^    unsigned gd_off_15_0 : 16;        \/\/ low 16 bits of offset in segment$/;"	m	struct:gatedesc
gd_off_31_16	kernel/include/mmu.h	/^    unsigned gd_off_31_16 : 16;        \/\/ high bits of offset in segment$/;"	m	struct:gatedesc
gd_p	kernel/include/mmu.h	/^    unsigned gd_p : 1;                \/\/ Present$/;"	m	struct:gatedesc
gd_rsv1	kernel/include/mmu.h	/^    unsigned gd_rsv1 : 3;            \/\/ reserved(should be zero I guess)$/;"	m	struct:gatedesc
gd_s	kernel/include/mmu.h	/^    unsigned gd_s : 1;                \/\/ must be 0 (system)$/;"	m	struct:gatedesc
gd_ss	kernel/include/mmu.h	/^    unsigned gd_ss : 16;            \/\/ segment selector$/;"	m	struct:gatedesc
gd_type	kernel/include/mmu.h	/^    unsigned gd_type : 4;            \/\/ type(STS_{TG,IG32,TG32})$/;"	m	struct:gatedesc
gdt	kernel/include/gdt.h	/^struct gdt_entry gdt[gdt_size];$/;"	v	typeref:struct:gdt_entry
gdt_entry	kernel/include/gdt.h	/^struct gdt_entry$/;"	s
gdt_flush	kernel/mm/gdt_s.s	/^gdt_flush:$/;"	l
gdt_install	kernel/mm/gdt.c	/^void gdt_install()$/;"	f
gdt_ptr	kernel/include/gdt.h	/^struct gdt_ptr$/;"	s
gdt_set_gate	kernel/mm/gdt.c	/^void gdt_set_gate(int num, unsigned long base, unsigned long limit, unsigned char access, unsigned char gran)$/;"	f
gdt_size	kernel/include/gdt.h	47;"	d
glb_mboot_ptr	boot/start.s	/^glb_mboot_ptr:$/;"	l
global	boot/start.s	/^global glb_mboot_ptr$/;"	l
global	boot/start.s	/^global start$/;"	l
global	kernel/driver/scrn_s.s	/^global set_cursor $/;"	l
global	kernel/mm/gdt_s.s	/^global gdt_flush$/;"	l
global	kernel/trap/idt_s.s	/^global idt_load$/;"	l
global	kernel/trap/irq_s.s	/^global irq0$/;"	l
global	kernel/trap/irq_s.s	/^global irq1$/;"	l
global	kernel/trap/irq_s.s	/^global irq10$/;"	l
global	kernel/trap/irq_s.s	/^global irq11$/;"	l
global	kernel/trap/irq_s.s	/^global irq12$/;"	l
global	kernel/trap/irq_s.s	/^global irq13$/;"	l
global	kernel/trap/irq_s.s	/^global irq14$/;"	l
global	kernel/trap/irq_s.s	/^global irq15$/;"	l
global	kernel/trap/irq_s.s	/^global irq2$/;"	l
global	kernel/trap/irq_s.s	/^global irq3$/;"	l
global	kernel/trap/irq_s.s	/^global irq4$/;"	l
global	kernel/trap/irq_s.s	/^global irq5$/;"	l
global	kernel/trap/irq_s.s	/^global irq6$/;"	l
global	kernel/trap/irq_s.s	/^global irq7$/;"	l
global	kernel/trap/irq_s.s	/^global irq8$/;"	l
global	kernel/trap/irq_s.s	/^global irq9$/;"	l
global	kernel/trap/isrs_s.s	/^global isr0$/;"	l
global	kernel/trap/isrs_s.s	/^global isr1$/;"	l
global	kernel/trap/isrs_s.s	/^global isr10$/;"	l
global	kernel/trap/isrs_s.s	/^global isr11$/;"	l
global	kernel/trap/isrs_s.s	/^global isr12$/;"	l
global	kernel/trap/isrs_s.s	/^global isr13$/;"	l
global	kernel/trap/isrs_s.s	/^global isr14$/;"	l
global	kernel/trap/isrs_s.s	/^global isr15$/;"	l
global	kernel/trap/isrs_s.s	/^global isr16$/;"	l
global	kernel/trap/isrs_s.s	/^global isr17$/;"	l
global	kernel/trap/isrs_s.s	/^global isr18$/;"	l
global	kernel/trap/isrs_s.s	/^global isr19$/;"	l
global	kernel/trap/isrs_s.s	/^global isr2$/;"	l
global	kernel/trap/isrs_s.s	/^global isr20$/;"	l
global	kernel/trap/isrs_s.s	/^global isr21$/;"	l
global	kernel/trap/isrs_s.s	/^global isr22$/;"	l
global	kernel/trap/isrs_s.s	/^global isr23$/;"	l
global	kernel/trap/isrs_s.s	/^global isr24$/;"	l
global	kernel/trap/isrs_s.s	/^global isr25$/;"	l
global	kernel/trap/isrs_s.s	/^global isr26$/;"	l
global	kernel/trap/isrs_s.s	/^global isr27$/;"	l
global	kernel/trap/isrs_s.s	/^global isr28$/;"	l
global	kernel/trap/isrs_s.s	/^global isr29$/;"	l
global	kernel/trap/isrs_s.s	/^global isr3$/;"	l
global	kernel/trap/isrs_s.s	/^global isr30$/;"	l
global	kernel/trap/isrs_s.s	/^global isr31$/;"	l
global	kernel/trap/isrs_s.s	/^global isr4$/;"	l
global	kernel/trap/isrs_s.s	/^global isr5$/;"	l
global	kernel/trap/isrs_s.s	/^global isr6$/;"	l
global	kernel/trap/isrs_s.s	/^global isr7$/;"	l
global	kernel/trap/isrs_s.s	/^global isr8$/;"	l
global	kernel/trap/isrs_s.s	/^global isr9$/;"	l
gp	kernel/include/gdt.h	/^struct gdt_ptr gp;$/;"	v	typeref:struct:gdt_ptr
granularity	kernel/include/gdt.h	/^    unsigned char granularity;$/;"	m	struct:gdt_entry
green	kernel/include/scrn.h	11;"	d
gs	kernel/include/idt.h	/^    unsigned int gs, fs, es, ds;$/;"	m	struct:regs
idt	kernel/include/idt.h	/^struct idt_entry idt[256];$/;"	v	typeref:struct:idt_entry
idt_entry	kernel/include/idt.h	/^struct idt_entry$/;"	s
idt_install	kernel/trap/idt.c	/^void idt_install()$/;"	f
idt_load	kernel/trap/idt_s.s	/^idt_load:$/;"	l
idt_ptr	kernel/include/idt.h	/^struct idt_ptr$/;"	s
idt_set_gate	kernel/trap/idt.c	/^void idt_set_gate(unsigned char num, unsigned long base, unsigned short sel, unsigned char flags)$/;"	f
idtp	kernel/include/idt.h	/^struct idt_ptr idtp;$/;"	v	typeref:struct:idt_ptr
info	kernel/include/elf.h	/^  uint32_t info;$/;"	m	struct:elf_section_header_t
info	kernel/include/elf.h	/^  uint8_t  info;$/;"	m	struct:elf_symbol_t
init_video	kernel/driver/scrn.c	/^void init_video(void)$/;"	f
inportb	kernel/libs/common.c	/^unsigned char inportb (unsigned short _port)$/;"	f
inportw	kernel/libs/common.c	/^unsigned short inportw(unsigned short port)$/;"	f
int16_t	kernel/include/type.h	/^typedef short int16_t;$/;"	t
int32_t	kernel/include/type.h	/^typedef int int32_t;$/;"	t
int64_t	kernel/include/type.h	/^typedef long long int64_t;$/;"	t
int8_t	kernel/include/type.h	/^typedef char int8_t;$/;"	t
int_no	kernel/include/idt.h	/^    unsigned int int_no, err_code;$/;"	m	struct:regs
intptr_t	kernel/include/type.h	/^typedef int32_t intptr_t;$/;"	t
irq0	kernel/trap/irq_s.s	/^irq0:$/;"	l
irq1	kernel/trap/irq_s.s	/^irq1:$/;"	l
irq10	kernel/trap/irq_s.s	/^irq10:$/;"	l
irq11	kernel/trap/irq_s.s	/^irq11:$/;"	l
irq12	kernel/trap/irq_s.s	/^irq12:$/;"	l
irq13	kernel/trap/irq_s.s	/^irq13:$/;"	l
irq14	kernel/trap/irq_s.s	/^irq14:$/;"	l
irq15	kernel/trap/irq_s.s	/^irq15:$/;"	l
irq2	kernel/trap/irq_s.s	/^irq2:$/;"	l
irq3	kernel/trap/irq_s.s	/^irq3:$/;"	l
irq4	kernel/trap/irq_s.s	/^irq4:$/;"	l
irq5	kernel/trap/irq_s.s	/^irq5:$/;"	l
irq6	kernel/trap/irq_s.s	/^irq6:$/;"	l
irq7	kernel/trap/irq_s.s	/^irq7:$/;"	l
irq8	kernel/trap/irq_s.s	/^irq8:$/;"	l
irq9	kernel/trap/irq_s.s	/^irq9:$/;"	l
irq_common_stub	kernel/trap/irq_s.s	/^irq_common_stub:$/;"	l
irq_handler	kernel/trap/irq.c	/^void irq_handler(struct regs *r)$/;"	f
irq_install	kernel/trap/irq.c	/^void irq_install()$/;"	f
irq_install_handler	kernel/trap/irq.c	/^void irq_install_handler(int irq, void (*handler)(struct regs *r))$/;"	f
irq_remap	kernel/trap/irq.c	/^void irq_remap(void)$/;"	f
irq_routines	kernel/include/irq.h	/^static void *irq_routines[16] =$/;"	v
irq_uninstall_handler	kernel/trap/irq.c	/^void irq_uninstall_handler(int irq)$/;"	f
isr0	kernel/trap/isrs_s.s	/^isr0:$/;"	l
isr1	kernel/trap/isrs_s.s	/^isr1:$/;"	l
isr10	kernel/trap/isrs_s.s	/^isr10:$/;"	l
isr11	kernel/trap/isrs_s.s	/^isr11:$/;"	l
isr12	kernel/trap/isrs_s.s	/^isr12:$/;"	l
isr13	kernel/trap/isrs_s.s	/^isr13:$/;"	l
isr14	kernel/trap/isrs_s.s	/^isr14:$/;"	l
isr15	kernel/trap/isrs_s.s	/^isr15:$/;"	l
isr16	kernel/trap/isrs_s.s	/^isr16:$/;"	l
isr17	kernel/trap/isrs_s.s	/^isr17:$/;"	l
isr18	kernel/trap/isrs_s.s	/^isr18:$/;"	l
isr19	kernel/trap/isrs_s.s	/^isr19:$/;"	l
isr2	kernel/trap/isrs_s.s	/^isr2:$/;"	l
isr20	kernel/trap/isrs_s.s	/^isr20:$/;"	l
isr21	kernel/trap/isrs_s.s	/^isr21:$/;"	l
isr22	kernel/trap/isrs_s.s	/^isr22:$/;"	l
isr23	kernel/trap/isrs_s.s	/^isr23:$/;"	l
isr24	kernel/trap/isrs_s.s	/^isr24:$/;"	l
isr25	kernel/trap/isrs_s.s	/^isr25:$/;"	l
isr26	kernel/trap/isrs_s.s	/^isr26:$/;"	l
isr27	kernel/trap/isrs_s.s	/^isr27:$/;"	l
isr28	kernel/trap/isrs_s.s	/^isr28:$/;"	l
isr29	kernel/trap/isrs_s.s	/^isr29:$/;"	l
isr3	kernel/trap/isrs_s.s	/^isr3:$/;"	l
isr30	kernel/trap/isrs_s.s	/^isr30:$/;"	l
isr31	kernel/trap/isrs_s.s	/^isr31:$/;"	l
isr4	kernel/trap/isrs_s.s	/^isr4:$/;"	l
isr5	kernel/trap/isrs_s.s	/^isr5:$/;"	l
isr6	kernel/trap/isrs_s.s	/^isr6:$/;"	l
isr7	kernel/trap/isrs_s.s	/^isr7:$/;"	l
isr8	kernel/trap/isrs_s.s	/^isr8:$/;"	l
isr9	kernel/trap/isrs_s.s	/^isr9:$/;"	l
isr_common_stub	kernel/trap/isrs_s.s	/^isr_common_stub:$/;"	l
isr_handler	kernel/trap/isrs.c	/^void isr_handler(struct regs *r)$/;"	f
isr_install_handler	kernel/trap/isrs.c	/^void isr_install_handler(int isr,void (*handler)(struct regs * r))$/;"	f
isr_routines	kernel/include/isrs.h	/^static void *isr_routines[32] = $/;"	v
isr_uninstall_handler	kernel/trap/isrs.c	/^void isr_uninstall_handler(int isr)$/;"	f
isrs_install	kernel/trap/isrs.c	/^void isrs_install()$/;"	f
itoa	kernel/driver/scrn.c	/^void itoa (char *buf, int base, int d)  $/;"	f
kbdus	kernel/driver/kb.c	/^unsigned char kbdus[128] =$/;"	v
keyboard_handler	kernel/driver/kb.c	/^void keyboard_handler(struct regs *r)$/;"	f
keyboard_install	kernel/driver/kb.c	/^void keyboard_install()$/;"	f
length_high	kernel/include/multiboot.h	/^	uint32_t length_high;$/;"	m	struct:mmap_entry_t
length_low	kernel/include/multiboot.h	/^	uint32_t length_low;$/;"	m	struct:mmap_entry_t
light_brown	kernel/include/scrn.h	22;"	d
light_cyan	kernel/include/scrn.h	19;"	d
light_green	kernel/include/scrn.h	18;"	d
light_grey	kernel/include/scrn.h	16;"	d
light_magenta	kernel/include/scrn.h	21;"	d
light_red	kernel/include/scrn.h	20;"	d
limit	kernel/include/gdt.h	/^    unsigned short limit;$/;"	m	struct:gdt_ptr
limit	kernel/include/idt.h	/^    unsigned short limit;$/;"	m	struct:idt_ptr
limit_low	kernel/include/gdt.h	/^    unsigned short limit_low;$/;"	m	struct:gdt_entry
link	kernel/include/elf.h	/^  uint32_t link;$/;"	m	struct:elf_section_header_t
ltr	kernel/mm/gdt.c	/^inline void ltr(uint16_t sel) $/;"	f
magenta	kernel/include/scrn.h	14;"	d
mboot	boot/start.s	/^mboot:$/;"	l
mem_lower	kernel/include/multiboot.h	/^	uint32_t mem_lower;$/;"	m	struct:multiboot_t
mem_upper	kernel/include/multiboot.h	/^	uint32_t mem_upper;$/;"	m	struct:multiboot_t
memcpy	kernel/libs/string.c	/^void *memcpy(void *dest, const void *src, size_t count)$/;"	f
memset	kernel/libs/string.c	/^void *memset(void *dest, char val, size_t count)$/;"	f
memsetw	kernel/libs/string.c	/^unsigned short *memsetw(unsigned short *dest, unsigned short val, size_t count)$/;"	f
mmap_addr	kernel/include/multiboot.h	/^	uint32_t mmap_addr;$/;"	m	struct:multiboot_t
mmap_entry_t	kernel/include/multiboot.h	/^struct mmap_entry_t {$/;"	s
mmap_entry_t	kernel/include/multiboot.h	/^} __attribute__((packed)) mmap_entry_t;$/;"	t	typeref:struct:mmap_entry_t
mmap_length	kernel/include/multiboot.h	/^	uint32_t mmap_length;		$/;"	m	struct:multiboot_t
mods_addr	kernel/include/multiboot.h	/^	uint32_t mods_addr;$/;"	m	struct:multiboot_t
mods_count	kernel/include/multiboot.h	/^	uint32_t mods_count;		\/\/ boot 模块列表$/;"	m	struct:multiboot_t
move_csr	kernel/driver/scrn.c	/^void move_csr(void)$/;"	f
multiboot_t	kernel/include/multiboot.h	/^struct multiboot_t {$/;"	s
multiboot_t	kernel/include/multiboot.h	/^} __attribute__((packed)) multiboot_t;$/;"	t	typeref:struct:multiboot_t
name	kernel/include/elf.h	/^  uint32_t name;$/;"	m	struct:elf_section_header_t
name	kernel/include/elf.h	/^  uint32_t name;$/;"	m	struct:elf_symbol_t
num	kernel/include/multiboot.h	/^	uint32_t num;$/;"	m	struct:multiboot_t
offset	kernel/include/elf.h	/^  uint32_t offset;$/;"	m	struct:elf_section_header_t
offsetof	kernel/include/type.h	58;"	d
other	kernel/include/elf.h	/^  uint8_t  other;$/;"	m	struct:elf_symbol_t
outportb	kernel/libs/common.c	/^void outportb (unsigned short _port, unsigned char _data)$/;"	f
panic	kernel/debug/debug.c	/^void panic(char *message,char *file, unsigned int line)$/;"	f
panic_assert	kernel/debug/debug.c	/^void panic_assert(char *file, unsigned int line, char *desc)$/;"	f
pop	kernel/driver/scrn_s.s	/^	pop dx$/;"	d
pop	kernel/trap/irq_s.s	/^    pop ds$/;"	d
pop	kernel/trap/isrs_s.s	/^    pop ds$/;"	d
ppn_t	kernel/include/type.h	/^typedef uintptr_t ppn_t;$/;"	t
printf	kernel/driver/scrn.c	/^void printf(const char *format, ...)  $/;"	f
push	kernel/driver/scrn_s.s	/^	push dx$/;"	d
push	kernel/trap/irq_s.s	/^    push ds$/;"	d
push	kernel/trap/isrs_s.s	/^    push ds$/;"	d
putc	kernel/driver/scrn.c	/^void putc(unsigned char c)$/;"	f
puts	kernel/driver/scrn.c	/^void puts(unsigned char *text)$/;"	f
red	kernel/include/scrn.h	13;"	d
regs	kernel/include/idt.h	/^struct regs$/;"	s
s16	kernel/include/type.h	/^typedef	         short		s16;$/;"	t
s32	kernel/include/type.h	/^typedef	         int		s32;$/;"	t
s8	kernel/include/type.h	/^typedef	         char		s8;$/;"	t
scroll	kernel/driver/scrn.c	/^void scroll(void)$/;"	f
sd_avl	kernel/include/mmu.h	/^    unsigned sd_avl : 1;            \/\/ unused (available for software use)$/;"	m	struct:segdesc
sd_base_15_0	kernel/include/mmu.h	/^    unsigned sd_base_15_0 : 16;        \/\/ low bits of segment base address$/;"	m	struct:segdesc
sd_base_23_16	kernel/include/mmu.h	/^    unsigned sd_base_23_16 : 8;        \/\/ middle bits of segment base address$/;"	m	struct:segdesc
sd_base_31_24	kernel/include/mmu.h	/^    unsigned sd_base_31_24 : 8;        \/\/ high bits of segment base address$/;"	m	struct:segdesc
sd_db	kernel/include/mmu.h	/^    unsigned sd_db : 1;                \/\/ 0 = 16-bit segment, 1 = 32-bit segment$/;"	m	struct:segdesc
sd_dpl	kernel/include/mmu.h	/^    unsigned sd_dpl : 2;            \/\/ descriptor Privilege Level$/;"	m	struct:segdesc
sd_g	kernel/include/mmu.h	/^    unsigned sd_g : 1;                \/\/ granularity: limit scaled by 4K when set$/;"	m	struct:segdesc
sd_lim_15_0	kernel/include/mmu.h	/^    unsigned sd_lim_15_0 : 16;        \/\/ low bits of segment limit$/;"	m	struct:segdesc
sd_lim_19_16	kernel/include/mmu.h	/^    unsigned sd_lim_19_16 : 4;        \/\/ high bits of segment limit$/;"	m	struct:segdesc
sd_p	kernel/include/mmu.h	/^    unsigned sd_p : 1;                \/\/ present$/;"	m	struct:segdesc
sd_rsv1	kernel/include/mmu.h	/^    unsigned sd_rsv1 : 1;            \/\/ reserved$/;"	m	struct:segdesc
sd_s	kernel/include/mmu.h	/^    unsigned sd_s : 1;                \/\/ 0 = system, 1 = application$/;"	m	struct:segdesc
sd_type	kernel/include/mmu.h	/^    unsigned sd_type : 4;            \/\/ segment type (see STS_ constants)$/;"	m	struct:segdesc
second	kernel/driver/timer.c	/^int second = 0;$/;"	v
segdesc	kernel/include/mmu.h	/^struct segdesc {$/;"	s
sel	kernel/include/idt.h	/^    unsigned short sel;$/;"	m	struct:idt_entry
set_cursor	kernel/driver/scrn_s.s	/^set_cursor:$/;"	l
set_ts	kernel/mm/gdt.c	/^void set_ts(struct taskstate ts)$/;"	f
settextcolor	kernel/driver/scrn.c	/^void settextcolor(unsigned char forecolor, unsigned char backcolor)$/;"	f
shndx	kernel/include/elf.h	/^  uint16_t shndx;$/;"	m	struct:elf_symbol_t
shndx	kernel/include/multiboot.h	/^	uint32_t shndx;$/;"	m	struct:multiboot_t
show_memory_map	kernel/mm/pmm.c	/^void show_memory_map()$/;"	f
size	kernel/include/elf.h	/^  uint32_t size;$/;"	m	struct:elf_section_header_t
size	kernel/include/elf.h	/^  uint32_t size;$/;"	m	struct:elf_symbol_t
size	kernel/include/multiboot.h	/^	uint32_t size; 		\/\/ 留意 size 是不含 size 自身变量的大小$/;"	m	struct:mmap_entry_t
size	kernel/include/multiboot.h	/^	uint32_t size;$/;"	m	struct:multiboot_t
size_t	kernel/include/type.h	/^typedef  	 int		size_t; $/;"	t
ss	kernel/include/idt.h	/^    unsigned int eip, cs, eflags, useresp, ss;    $/;"	m	struct:regs
stack	boot/start.s	/^stack:$/;"	l
stack0	kernel/mm/gdt.c	/^uint8_t stack0[1024];$/;"	v
start	boot/start.s	/^start:$/;"	l
stop	boot/start.s	/^stop:$/;"	l
strcat	kernel/libs/string.c	/^char *strcat(char *dest, const char *src)$/;"	f
strcmp	kernel/libs/string.c	/^int strcmp(char *str1, char *str2)$/;"	f
strcpy	kernel/libs/string.c	/^char *strcpy(char *dest, const char *src)$/;"	f
strlen	kernel/libs/string.c	/^size_t strlen(const char *str)$/;"	f
strtab	kernel/include/elf.h	/^  const char   *strtab;$/;"	m	struct:elf_t
strtabsz	kernel/include/elf.h	/^  uint32_t      strtabsz;$/;"	m	struct:elf_t
stublet	boot/start.s	/^stublet:$/;"	l
symtab	kernel/include/elf.h	/^  elf_symbol_t *symtab;$/;"	m	struct:elf_t
symtabsz	kernel/include/elf.h	/^  uint32_t      symtabsz;$/;"	m	struct:elf_t
taskstate	kernel/include/mmu.h	/^struct taskstate {$/;"	s
textmemptr	kernel/driver/scrn.c	/^static unsigned short *textmemptr = (unsigned short *)0xB8000;$/;"	v	file:
timer_handler	kernel/driver/timer.c	/^void timer_handler(struct regs *r)$/;"	f
timer_install	kernel/driver/timer.c	/^void timer_install()$/;"	f
timer_phase	kernel/driver/timer.c	/^void timer_phase(int hz)$/;"	f
timer_test	kernel/driver/timer.c	/^void timer_test(int count)$/;"	f
timer_ticks	kernel/driver/timer.c	/^int timer_ticks = 0;$/;"	v
timer_wait	kernel/driver/timer.c	/^void timer_wait(int ticks)$/;"	f
to_struct	kernel/include/type.h	67;"	d
ts	kernel/mm/gdt.c	/^struct taskstate ts = {0};$/;"	v	typeref:struct:taskstate
ts_cr3	kernel/include/mmu.h	/^    uintptr_t ts_cr3;        \/\/ page directory base$/;"	m	struct:taskstate
ts_cs	kernel/include/mmu.h	/^    uint16_t ts_cs;$/;"	m	struct:taskstate
ts_ds	kernel/include/mmu.h	/^    uint16_t ts_ds;$/;"	m	struct:taskstate
ts_eax	kernel/include/mmu.h	/^    uint32_t ts_eax;        \/\/ more saved state (registers)$/;"	m	struct:taskstate
ts_ebp	kernel/include/mmu.h	/^    uintptr_t ts_ebp;$/;"	m	struct:taskstate
ts_ebx	kernel/include/mmu.h	/^    uint32_t ts_ebx;$/;"	m	struct:taskstate
ts_ecx	kernel/include/mmu.h	/^    uint32_t ts_ecx;$/;"	m	struct:taskstate
ts_edi	kernel/include/mmu.h	/^    uint32_t ts_edi;$/;"	m	struct:taskstate
ts_edx	kernel/include/mmu.h	/^    uint32_t ts_edx;$/;"	m	struct:taskstate
ts_eflags	kernel/include/mmu.h	/^    uint32_t ts_eflags;$/;"	m	struct:taskstate
ts_eip	kernel/include/mmu.h	/^    uintptr_t ts_eip;        \/\/ saved state from last task switch$/;"	m	struct:taskstate
ts_es	kernel/include/mmu.h	/^    uint16_t ts_es;            \/\/ even more saved state (segment selectors)$/;"	m	struct:taskstate
ts_esi	kernel/include/mmu.h	/^    uint32_t ts_esi;$/;"	m	struct:taskstate
ts_esp	kernel/include/mmu.h	/^    uintptr_t ts_esp;$/;"	m	struct:taskstate
ts_esp0	kernel/include/mmu.h	/^    uintptr_t ts_esp0;        \/\/ stack pointers and segment selectors$/;"	m	struct:taskstate
ts_esp1	kernel/include/mmu.h	/^    uintptr_t ts_esp1;$/;"	m	struct:taskstate
ts_esp2	kernel/include/mmu.h	/^    uintptr_t ts_esp2;$/;"	m	struct:taskstate
ts_fs	kernel/include/mmu.h	/^    uint16_t ts_fs;$/;"	m	struct:taskstate
ts_gs	kernel/include/mmu.h	/^    uint16_t ts_gs;$/;"	m	struct:taskstate
ts_iomb	kernel/include/mmu.h	/^    uint16_t ts_iomb;        \/\/ i\/o map base address$/;"	m	struct:taskstate
ts_ldt	kernel/include/mmu.h	/^    uint16_t ts_ldt;$/;"	m	struct:taskstate
ts_link	kernel/include/mmu.h	/^    uint32_t ts_link;        \/\/ old ts selector$/;"	m	struct:taskstate
ts_padding1	kernel/include/mmu.h	/^    uint16_t ts_padding1;$/;"	m	struct:taskstate
ts_padding10	kernel/include/mmu.h	/^    uint16_t ts_padding10;$/;"	m	struct:taskstate
ts_padding2	kernel/include/mmu.h	/^    uint16_t ts_padding2;$/;"	m	struct:taskstate
ts_padding3	kernel/include/mmu.h	/^    uint16_t ts_padding3;$/;"	m	struct:taskstate
ts_padding4	kernel/include/mmu.h	/^    uint16_t ts_padding4;$/;"	m	struct:taskstate
ts_padding5	kernel/include/mmu.h	/^    uint16_t ts_padding5;$/;"	m	struct:taskstate
ts_padding6	kernel/include/mmu.h	/^    uint16_t ts_padding6;$/;"	m	struct:taskstate
ts_padding7	kernel/include/mmu.h	/^    uint16_t ts_padding7;$/;"	m	struct:taskstate
ts_padding8	kernel/include/mmu.h	/^    uint16_t ts_padding8;$/;"	m	struct:taskstate
ts_padding9	kernel/include/mmu.h	/^    uint16_t ts_padding9;$/;"	m	struct:taskstate
ts_ss	kernel/include/mmu.h	/^    uint16_t ts_ss;$/;"	m	struct:taskstate
ts_ss0	kernel/include/mmu.h	/^    uint16_t ts_ss0;        \/\/ after an increase in privilege level$/;"	m	struct:taskstate
ts_ss1	kernel/include/mmu.h	/^    uint16_t ts_ss1;$/;"	m	struct:taskstate
ts_ss2	kernel/include/mmu.h	/^    uint16_t ts_ss2;$/;"	m	struct:taskstate
ts_t	kernel/include/mmu.h	/^    uint16_t ts_t;            \/\/ trap on task switch$/;"	m	struct:taskstate
type	kernel/include/elf.h	/^  uint32_t type;$/;"	m	struct:elf_section_header_t
type	kernel/include/multiboot.h	/^	uint32_t type;$/;"	m	struct:mmap_entry_t
u16	kernel/include/type.h	/^typedef	unsigned short		u16;$/;"	t
u32	kernel/include/type.h	/^typedef	unsigned int		u32;$/;"	t
u8	kernel/include/type.h	/^typedef	unsigned char		u8;$/;"	t
uint16_t	kernel/include/type.h	/^typedef unsigned short uint16_t;$/;"	t
uint32_t	kernel/include/type.h	/^typedef unsigned int uint32_t;$/;"	t
uint64_t	kernel/include/type.h	/^typedef unsigned long long uint64_t;$/;"	t
uint8_t	kernel/include/type.h	/^typedef unsigned char uint8_t;$/;"	t
uintptr_t	kernel/include/type.h	/^typedef uint32_t uintptr_t;$/;"	t
useresp	kernel/include/idt.h	/^    unsigned int eip, cs, eflags, useresp, ss;    $/;"	m	struct:regs
value	kernel/include/elf.h	/^  uint32_t value;$/;"	m	struct:elf_symbol_t
vbe_control_info	kernel/include/multiboot.h	/^	uint32_t vbe_control_info;$/;"	m	struct:multiboot_t
vbe_interface_len	kernel/include/multiboot.h	/^	uint32_t vbe_interface_len;$/;"	m	struct:multiboot_t
vbe_interface_off	kernel/include/multiboot.h	/^	uint32_t vbe_interface_off;$/;"	m	struct:multiboot_t
vbe_interface_seg	kernel/include/multiboot.h	/^	uint32_t vbe_interface_seg;$/;"	m	struct:multiboot_t
vbe_mode	kernel/include/multiboot.h	/^	uint32_t vbe_mode;$/;"	m	struct:multiboot_t
vbe_mode_info	kernel/include/multiboot.h	/^	uint32_t vbe_mode_info;$/;"	m	struct:multiboot_t
white	kernel/include/scrn.h	23;"	d
